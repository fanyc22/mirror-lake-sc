circuit MirrorLakeSC :
  module RegisterFile :
    input clock : Clock
    input reset : Reset
    output io : { flip rs1 : UInt<5>, flip rs2 : UInt<5>, flip rd : UInt<5>, flip writeData : UInt<32>, flip regWrite : UInt<1>, rs1Data : UInt<32>, rs2Data : UInt<32>}

    wire _regs_WIRE : UInt<32>[32] @[RegisterFile.scala 15:29]
    _regs_WIRE[0] <= UInt<32>("h0") @[RegisterFile.scala 15:29]
    _regs_WIRE[1] <= UInt<32>("h0") @[RegisterFile.scala 15:29]
    _regs_WIRE[2] <= UInt<32>("h0") @[RegisterFile.scala 15:29]
    _regs_WIRE[3] <= UInt<32>("h0") @[RegisterFile.scala 15:29]
    _regs_WIRE[4] <= UInt<32>("h0") @[RegisterFile.scala 15:29]
    _regs_WIRE[5] <= UInt<32>("h0") @[RegisterFile.scala 15:29]
    _regs_WIRE[6] <= UInt<32>("h0") @[RegisterFile.scala 15:29]
    _regs_WIRE[7] <= UInt<32>("h0") @[RegisterFile.scala 15:29]
    _regs_WIRE[8] <= UInt<32>("h0") @[RegisterFile.scala 15:29]
    _regs_WIRE[9] <= UInt<32>("h0") @[RegisterFile.scala 15:29]
    _regs_WIRE[10] <= UInt<32>("h0") @[RegisterFile.scala 15:29]
    _regs_WIRE[11] <= UInt<32>("h0") @[RegisterFile.scala 15:29]
    _regs_WIRE[12] <= UInt<32>("h0") @[RegisterFile.scala 15:29]
    _regs_WIRE[13] <= UInt<32>("h0") @[RegisterFile.scala 15:29]
    _regs_WIRE[14] <= UInt<32>("h0") @[RegisterFile.scala 15:29]
    _regs_WIRE[15] <= UInt<32>("h0") @[RegisterFile.scala 15:29]
    _regs_WIRE[16] <= UInt<32>("h0") @[RegisterFile.scala 15:29]
    _regs_WIRE[17] <= UInt<32>("h0") @[RegisterFile.scala 15:29]
    _regs_WIRE[18] <= UInt<32>("h0") @[RegisterFile.scala 15:29]
    _regs_WIRE[19] <= UInt<32>("h0") @[RegisterFile.scala 15:29]
    _regs_WIRE[20] <= UInt<32>("h0") @[RegisterFile.scala 15:29]
    _regs_WIRE[21] <= UInt<32>("h0") @[RegisterFile.scala 15:29]
    _regs_WIRE[22] <= UInt<32>("h0") @[RegisterFile.scala 15:29]
    _regs_WIRE[23] <= UInt<32>("h0") @[RegisterFile.scala 15:29]
    _regs_WIRE[24] <= UInt<32>("h0") @[RegisterFile.scala 15:29]
    _regs_WIRE[25] <= UInt<32>("h0") @[RegisterFile.scala 15:29]
    _regs_WIRE[26] <= UInt<32>("h0") @[RegisterFile.scala 15:29]
    _regs_WIRE[27] <= UInt<32>("h0") @[RegisterFile.scala 15:29]
    _regs_WIRE[28] <= UInt<32>("h0") @[RegisterFile.scala 15:29]
    _regs_WIRE[29] <= UInt<32>("h0") @[RegisterFile.scala 15:29]
    _regs_WIRE[30] <= UInt<32>("h0") @[RegisterFile.scala 15:29]
    _regs_WIRE[31] <= UInt<32>("h0") @[RegisterFile.scala 15:29]
    reg regs : UInt<32>[32], clock with :
      reset => (reset, _regs_WIRE) @[RegisterFile.scala 15:21]
    regs[0] <= UInt<1>("h0") @[RegisterFile.scala 17:11]
    node _io_rs1Data_T = eq(io.rs1, UInt<1>("h0")) @[RegisterFile.scala 18:28]
    node _io_rs1Data_T_1 = mux(_io_rs1Data_T, UInt<1>("h0"), regs[io.rs1]) @[RegisterFile.scala 18:20]
    io.rs1Data <= _io_rs1Data_T_1 @[RegisterFile.scala 18:14]
    node _io_rs2Data_T = eq(io.rs2, UInt<1>("h0")) @[RegisterFile.scala 19:28]
    node _io_rs2Data_T_1 = mux(_io_rs2Data_T, UInt<1>("h0"), regs[io.rs2]) @[RegisterFile.scala 19:20]
    io.rs2Data <= _io_rs2Data_T_1 @[RegisterFile.scala 19:14]
    node _T = neq(io.rd, UInt<1>("h0")) @[RegisterFile.scala 20:29]
    node _T_1 = and(io.regWrite, _T) @[RegisterFile.scala 20:20]
    when _T_1 : @[RegisterFile.scala 20:38]
      regs[io.rd] <= io.writeData @[RegisterFile.scala 21:17]


  module ALU :
    input clock : Clock
    input reset : Reset
    output io : { flip op : UInt<4>, flip a : UInt<32>, flip b : UInt<32>, result : UInt<32>}

    io.result <= UInt<1>("h0") @[ALU.scala 14:13]
    node _T = eq(UInt<4>("h0"), io.op) @[ALU.scala 15:17]
    when _T : @[ALU.scala 15:17]
      node _io_result_T = add(io.a, io.b) @[ALU.scala 16:34]
      node _io_result_T_1 = tail(_io_result_T, 1) @[ALU.scala 16:34]
      io.result <= _io_result_T_1 @[ALU.scala 16:26]
    else :
      node _T_1 = eq(UInt<4>("h1"), io.op) @[ALU.scala 15:17]
      when _T_1 : @[ALU.scala 15:17]
        node _io_result_T_2 = sub(io.a, io.b) @[ALU.scala 17:34]
        node _io_result_T_3 = tail(_io_result_T_2, 1) @[ALU.scala 17:34]
        io.result <= _io_result_T_3 @[ALU.scala 17:26]
      else :
        node _T_2 = eq(UInt<4>("h2"), io.op) @[ALU.scala 15:17]
        when _T_2 : @[ALU.scala 15:17]
          node _io_result_T_4 = bits(io.b, 4, 0) @[ALU.scala 18:41]
          node _io_result_T_5 = dshl(io.a, _io_result_T_4) @[ALU.scala 18:34]
          io.result <= _io_result_T_5 @[ALU.scala 18:26]
        else :
          node _T_3 = eq(UInt<4>("h3"), io.op) @[ALU.scala 15:17]
          when _T_3 : @[ALU.scala 15:17]
            node _io_result_T_6 = asSInt(io.a) @[ALU.scala 19:35]
            node _io_result_T_7 = asSInt(io.b) @[ALU.scala 19:49]
            node _io_result_T_8 = lt(_io_result_T_6, _io_result_T_7) @[ALU.scala 19:42]
            io.result <= _io_result_T_8 @[ALU.scala 19:26]
          else :
            node _T_4 = eq(UInt<4>("h4"), io.op) @[ALU.scala 15:17]
            when _T_4 : @[ALU.scala 15:17]
              node _io_result_T_9 = lt(io.a, io.b) @[ALU.scala 20:35]
              io.result <= _io_result_T_9 @[ALU.scala 20:26]
            else :
              node _T_5 = eq(UInt<4>("h5"), io.op) @[ALU.scala 15:17]
              when _T_5 : @[ALU.scala 15:17]
                node _io_result_T_10 = xor(io.a, io.b) @[ALU.scala 21:34]
                io.result <= _io_result_T_10 @[ALU.scala 21:26]
              else :
                node _T_6 = eq(UInt<4>("h6"), io.op) @[ALU.scala 15:17]
                when _T_6 : @[ALU.scala 15:17]
                  node _io_result_T_11 = bits(io.b, 4, 0) @[ALU.scala 22:41]
                  node _io_result_T_12 = dshr(io.a, _io_result_T_11) @[ALU.scala 22:34]
                  io.result <= _io_result_T_12 @[ALU.scala 22:26]
                else :
                  node _T_7 = eq(UInt<4>("h7"), io.op) @[ALU.scala 15:17]
                  when _T_7 : @[ALU.scala 15:17]
                    node _io_result_T_13 = asSInt(io.a) @[ALU.scala 23:35]
                    node _io_result_T_14 = bits(io.b, 4, 0) @[ALU.scala 23:49]
                    node _io_result_T_15 = dshr(_io_result_T_13, _io_result_T_14) @[ALU.scala 23:42]
                    node _io_result_T_16 = asUInt(_io_result_T_15) @[ALU.scala 23:56]
                    io.result <= _io_result_T_16 @[ALU.scala 23:26]
                  else :
                    node _T_8 = eq(UInt<4>("h8"), io.op) @[ALU.scala 15:17]
                    when _T_8 : @[ALU.scala 15:17]
                      node _io_result_T_17 = or(io.a, io.b) @[ALU.scala 24:34]
                      io.result <= _io_result_T_17 @[ALU.scala 24:26]
                    else :
                      node _T_9 = eq(UInt<4>("h9"), io.op) @[ALU.scala 15:17]
                      when _T_9 : @[ALU.scala 15:17]
                        node _io_result_T_18 = and(io.a, io.b) @[ALU.scala 25:34]
                        io.result <= _io_result_T_18 @[ALU.scala 25:26]


  module MirrorLakeSC :
    input clock : Clock
    input reset : UInt<1>
    output io : { imem_addr : UInt<32>, flip imem_inst : UInt<32>, dmem_addr : UInt<32>, dmem_wdata : UInt<32>, flip dmem_rdata : UInt<32>, dmem_wen : UInt<1>, dmem_wmask : UInt<4>}

    reg pc : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[MirrorLakeSC.scala 20:19]
    io.imem_addr <= pc @[MirrorLakeSC.scala 21:16]
    inst regfile of RegisterFile @[MirrorLakeSC.scala 25:23]
    regfile.clock <= clock
    regfile.reset <= reset
    inst alu of ALU @[MirrorLakeSC.scala 26:19]
    alu.clock <= clock
    alu.reset <= reset
    node opcode = bits(io.imem_inst, 6, 0) @[MirrorLakeSC.scala 29:20]
    node rd = bits(io.imem_inst, 11, 7) @[MirrorLakeSC.scala 30:20]
    node funct3 = bits(io.imem_inst, 14, 12) @[MirrorLakeSC.scala 31:20]
    node rs1 = bits(io.imem_inst, 19, 15) @[MirrorLakeSC.scala 32:20]
    node rs2 = bits(io.imem_inst, 24, 20) @[MirrorLakeSC.scala 33:20]
    node funct7 = bits(io.imem_inst, 31, 25) @[MirrorLakeSC.scala 34:20]
    regfile.io.rs1 <= rs1 @[MirrorLakeSC.scala 37:18]
    regfile.io.rs2 <= rs2 @[MirrorLakeSC.scala 38:18]
    node _immI_T = bits(io.imem_inst, 31, 31) @[MirrorLakeSC.scala 41:31]
    node _immI_T_1 = bits(_immI_T, 0, 0) @[Bitwise.scala 77:15]
    node _immI_T_2 = mux(_immI_T_1, UInt<20>("hfffff"), UInt<20>("h0")) @[Bitwise.scala 77:12]
    node _immI_T_3 = bits(io.imem_inst, 31, 20) @[MirrorLakeSC.scala 41:42]
    node _immI_T_4 = cat(_immI_T_2, _immI_T_3) @[Cat.scala 33:92]
    node immI = asSInt(_immI_T_4) @[MirrorLakeSC.scala 41:51]
    node _immS_T = bits(io.imem_inst, 31, 31) @[MirrorLakeSC.scala 42:31]
    node _immS_T_1 = bits(_immS_T, 0, 0) @[Bitwise.scala 77:15]
    node _immS_T_2 = mux(_immS_T_1, UInt<20>("hfffff"), UInt<20>("h0")) @[Bitwise.scala 77:12]
    node _immS_T_3 = bits(io.imem_inst, 31, 25) @[MirrorLakeSC.scala 42:42]
    node _immS_T_4 = bits(io.imem_inst, 11, 7) @[MirrorLakeSC.scala 42:55]
    node immS_hi = cat(_immS_T_2, _immS_T_3) @[Cat.scala 33:92]
    node _immS_T_5 = cat(immS_hi, _immS_T_4) @[Cat.scala 33:92]
    node immS = asSInt(_immS_T_5) @[MirrorLakeSC.scala 42:63]
    node _immB_T = bits(io.imem_inst, 31, 31) @[MirrorLakeSC.scala 43:31]
    node _immB_T_1 = bits(_immB_T, 0, 0) @[Bitwise.scala 77:15]
    node _immB_T_2 = mux(_immB_T_1, UInt<19>("h7ffff"), UInt<19>("h0")) @[Bitwise.scala 77:12]
    node _immB_T_3 = bits(io.imem_inst, 31, 31) @[MirrorLakeSC.scala 43:42]
    node _immB_T_4 = bits(io.imem_inst, 7, 7) @[MirrorLakeSC.scala 43:52]
    node _immB_T_5 = bits(io.imem_inst, 30, 25) @[MirrorLakeSC.scala 43:61]
    node _immB_T_6 = bits(io.imem_inst, 11, 8) @[MirrorLakeSC.scala 43:74]
    node immB_lo_hi = cat(_immB_T_5, _immB_T_6) @[Cat.scala 33:92]
    node immB_lo = cat(immB_lo_hi, UInt<1>("h0")) @[Cat.scala 33:92]
    node immB_hi_hi = cat(_immB_T_2, _immB_T_3) @[Cat.scala 33:92]
    node immB_hi = cat(immB_hi_hi, _immB_T_4) @[Cat.scala 33:92]
    node _immB_T_7 = cat(immB_hi, immB_lo) @[Cat.scala 33:92]
    node immB = asSInt(_immB_T_7) @[MirrorLakeSC.scala 43:92]
    node _immU_T = bits(io.imem_inst, 31, 12) @[MirrorLakeSC.scala 44:22]
    node immU = cat(_immU_T, UInt<12>("h0")) @[Cat.scala 33:92]
    node _immJ_T = bits(io.imem_inst, 31, 31) @[MirrorLakeSC.scala 45:31]
    node _immJ_T_1 = bits(_immJ_T, 0, 0) @[Bitwise.scala 77:15]
    node _immJ_T_2 = mux(_immJ_T_1, UInt<11>("h7ff"), UInt<11>("h0")) @[Bitwise.scala 77:12]
    node _immJ_T_3 = bits(io.imem_inst, 31, 31) @[MirrorLakeSC.scala 45:42]
    node _immJ_T_4 = bits(io.imem_inst, 19, 12) @[MirrorLakeSC.scala 45:52]
    node _immJ_T_5 = bits(io.imem_inst, 20, 20) @[MirrorLakeSC.scala 45:65]
    node _immJ_T_6 = bits(io.imem_inst, 30, 21) @[MirrorLakeSC.scala 45:75]
    node immJ_lo_hi = cat(_immJ_T_5, _immJ_T_6) @[Cat.scala 33:92]
    node immJ_lo = cat(immJ_lo_hi, UInt<1>("h0")) @[Cat.scala 33:92]
    node immJ_hi_hi = cat(_immJ_T_2, _immJ_T_3) @[Cat.scala 33:92]
    node immJ_hi = cat(immJ_hi_hi, _immJ_T_4) @[Cat.scala 33:92]
    node _immJ_T_7 = cat(immJ_hi, immJ_lo) @[Cat.scala 33:92]
    node immJ = asSInt(_immJ_T_7) @[MirrorLakeSC.scala 45:94]
    wire regWrite : UInt<1> @[MirrorLakeSC.scala 48:33]
    regWrite <= UInt<1>("h0") @[MirrorLakeSC.scala 48:33]
    wire writeBackData : UInt<32> @[MirrorLakeSC.scala 49:33]
    writeBackData <= UInt<32>("h0") @[MirrorLakeSC.scala 49:33]
    wire aluOp : UInt<4> @[MirrorLakeSC.scala 50:33]
    aluOp <= UInt<4>("h0") @[MirrorLakeSC.scala 50:33]
    wire aluSrc1 : UInt @[MirrorLakeSC.scala 51:33]
    aluSrc1 <= regfile.io.rs1Data @[MirrorLakeSC.scala 51:33]
    wire aluSrc2 : UInt @[MirrorLakeSC.scala 52:33]
    aluSrc2 <= regfile.io.rs2Data @[MirrorLakeSC.scala 52:33]
    node _nextPC_T = add(pc, UInt<3>("h4")) @[MirrorLakeSC.scala 53:37]
    node _nextPC_T_1 = tail(_nextPC_T, 1) @[MirrorLakeSC.scala 53:37]
    wire nextPC : UInt @[MirrorLakeSC.scala 53:33]
    nextPC <= _nextPC_T_1 @[MirrorLakeSC.scala 53:33]
    io.dmem_addr <= UInt<1>("h0") @[MirrorLakeSC.scala 56:17]
    io.dmem_wdata <= UInt<1>("h0") @[MirrorLakeSC.scala 57:17]
    io.dmem_wen <= UInt<1>("h0") @[MirrorLakeSC.scala 58:17]
    io.dmem_wmask <= UInt<4>("h0") @[MirrorLakeSC.scala 59:17]
    wire branchTaken : UInt<1> @[MirrorLakeSC.scala 61:32]
    branchTaken <= UInt<1>("h0") @[MirrorLakeSC.scala 61:32]
    node _T = eq(UInt<7>("h37"), opcode) @[MirrorLakeSC.scala 64:18]
    when _T : @[MirrorLakeSC.scala 64:18]
      writeBackData <= immU @[MirrorLakeSC.scala 67:21]
      regWrite <= UInt<1>("h1") @[MirrorLakeSC.scala 68:16]
    else :
      node _T_1 = eq(UInt<7>("h17"), opcode) @[MirrorLakeSC.scala 64:18]
      when _T_1 : @[MirrorLakeSC.scala 64:18]
        node _writeBackData_T = add(pc, immU) @[MirrorLakeSC.scala 72:27]
        node _writeBackData_T_1 = tail(_writeBackData_T, 1) @[MirrorLakeSC.scala 72:27]
        writeBackData <= _writeBackData_T_1 @[MirrorLakeSC.scala 72:21]
        regWrite <= UInt<1>("h1") @[MirrorLakeSC.scala 73:16]
      else :
        node _T_2 = eq(UInt<7>("h6f"), opcode) @[MirrorLakeSC.scala 64:18]
        when _T_2 : @[MirrorLakeSC.scala 64:18]
          node _writeBackData_T_2 = add(pc, UInt<3>("h4")) @[MirrorLakeSC.scala 77:27]
          node _writeBackData_T_3 = tail(_writeBackData_T_2, 1) @[MirrorLakeSC.scala 77:27]
          writeBackData <= _writeBackData_T_3 @[MirrorLakeSC.scala 77:21]
          regWrite <= UInt<1>("h1") @[MirrorLakeSC.scala 78:16]
          node _nextPC_T_2 = asSInt(pc) @[MirrorLakeSC.scala 79:21]
          node _nextPC_T_3 = add(_nextPC_T_2, immJ) @[MirrorLakeSC.scala 79:28]
          node _nextPC_T_4 = tail(_nextPC_T_3, 1) @[MirrorLakeSC.scala 79:28]
          node _nextPC_T_5 = asSInt(_nextPC_T_4) @[MirrorLakeSC.scala 79:28]
          node _nextPC_T_6 = asUInt(_nextPC_T_5) @[MirrorLakeSC.scala 79:36]
          nextPC <= _nextPC_T_6 @[MirrorLakeSC.scala 79:14]
        else :
          node _T_3 = eq(UInt<7>("h67"), opcode) @[MirrorLakeSC.scala 64:18]
          when _T_3 : @[MirrorLakeSC.scala 64:18]
            node _writeBackData_T_4 = add(pc, UInt<3>("h4")) @[MirrorLakeSC.scala 83:27]
            node _writeBackData_T_5 = tail(_writeBackData_T_4, 1) @[MirrorLakeSC.scala 83:27]
            writeBackData <= _writeBackData_T_5 @[MirrorLakeSC.scala 83:21]
            regWrite <= UInt<1>("h1") @[MirrorLakeSC.scala 84:16]
            node _nextPC_T_7 = asSInt(regfile.io.rs1Data) @[MirrorLakeSC.scala 85:39]
            node _nextPC_T_8 = add(_nextPC_T_7, immI) @[MirrorLakeSC.scala 85:46]
            node _nextPC_T_9 = tail(_nextPC_T_8, 1) @[MirrorLakeSC.scala 85:46]
            node _nextPC_T_10 = asSInt(_nextPC_T_9) @[MirrorLakeSC.scala 85:46]
            node _nextPC_T_11 = asUInt(_nextPC_T_10) @[MirrorLakeSC.scala 85:54]
            node _nextPC_T_12 = not(UInt<32>("h1")) @[MirrorLakeSC.scala 85:63]
            node _nextPC_T_13 = and(_nextPC_T_11, _nextPC_T_12) @[MirrorLakeSC.scala 85:61]
            nextPC <= _nextPC_T_13 @[MirrorLakeSC.scala 85:14]
          else :
            node _T_4 = eq(UInt<7>("h63"), opcode) @[MirrorLakeSC.scala 64:18]
            when _T_4 : @[MirrorLakeSC.scala 64:18]
              node _T_5 = eq(UInt<1>("h0"), funct3) @[MirrorLakeSC.scala 89:22]
              when _T_5 : @[MirrorLakeSC.scala 89:22]
                node _branchTaken_T = eq(regfile.io.rs1Data, regfile.io.rs2Data) @[MirrorLakeSC.scala 90:59]
                branchTaken <= _branchTaken_T @[MirrorLakeSC.scala 90:36]
              else :
                node _T_6 = eq(UInt<1>("h1"), funct3) @[MirrorLakeSC.scala 89:22]
                when _T_6 : @[MirrorLakeSC.scala 89:22]
                  node _branchTaken_T_1 = neq(regfile.io.rs1Data, regfile.io.rs2Data) @[MirrorLakeSC.scala 91:59]
                  branchTaken <= _branchTaken_T_1 @[MirrorLakeSC.scala 91:36]
                else :
                  node _T_7 = eq(UInt<3>("h4"), funct3) @[MirrorLakeSC.scala 89:22]
                  when _T_7 : @[MirrorLakeSC.scala 89:22]
                    node _branchTaken_T_2 = asSInt(regfile.io.rs1Data) @[MirrorLakeSC.scala 92:59]
                    node _branchTaken_T_3 = asSInt(regfile.io.rs2Data) @[MirrorLakeSC.scala 92:87]
                    node _branchTaken_T_4 = lt(_branchTaken_T_2, _branchTaken_T_3) @[MirrorLakeSC.scala 92:66]
                    branchTaken <= _branchTaken_T_4 @[MirrorLakeSC.scala 92:36]
                  else :
                    node _T_8 = eq(UInt<3>("h5"), funct3) @[MirrorLakeSC.scala 89:22]
                    when _T_8 : @[MirrorLakeSC.scala 89:22]
                      node _branchTaken_T_5 = asSInt(regfile.io.rs1Data) @[MirrorLakeSC.scala 93:59]
                      node _branchTaken_T_6 = asSInt(regfile.io.rs2Data) @[MirrorLakeSC.scala 93:88]
                      node _branchTaken_T_7 = geq(_branchTaken_T_5, _branchTaken_T_6) @[MirrorLakeSC.scala 93:66]
                      branchTaken <= _branchTaken_T_7 @[MirrorLakeSC.scala 93:36]
                    else :
                      node _T_9 = eq(UInt<3>("h6"), funct3) @[MirrorLakeSC.scala 89:22]
                      when _T_9 : @[MirrorLakeSC.scala 89:22]
                        node _branchTaken_T_8 = lt(regfile.io.rs1Data, regfile.io.rs2Data) @[MirrorLakeSC.scala 94:59]
                        branchTaken <= _branchTaken_T_8 @[MirrorLakeSC.scala 94:36]
                      else :
                        node _T_10 = eq(UInt<3>("h7"), funct3) @[MirrorLakeSC.scala 89:22]
                        when _T_10 : @[MirrorLakeSC.scala 89:22]
                          node _branchTaken_T_9 = geq(regfile.io.rs1Data, regfile.io.rs2Data) @[MirrorLakeSC.scala 95:59]
                          branchTaken <= _branchTaken_T_9 @[MirrorLakeSC.scala 95:36]
              when branchTaken : @[MirrorLakeSC.scala 97:25]
                node _nextPC_T_14 = asSInt(pc) @[MirrorLakeSC.scala 98:23]
                node _nextPC_T_15 = add(_nextPC_T_14, immB) @[MirrorLakeSC.scala 98:30]
                node _nextPC_T_16 = tail(_nextPC_T_15, 1) @[MirrorLakeSC.scala 98:30]
                node _nextPC_T_17 = asSInt(_nextPC_T_16) @[MirrorLakeSC.scala 98:30]
                node _nextPC_T_18 = asUInt(_nextPC_T_17) @[MirrorLakeSC.scala 98:38]
                nextPC <= _nextPC_T_18 @[MirrorLakeSC.scala 98:16]
            else :
              node _T_11 = eq(UInt<7>("h3"), opcode) @[MirrorLakeSC.scala 64:18]
              when _T_11 : @[MirrorLakeSC.scala 64:18]
                node _addr_T = asSInt(regfile.io.rs1Data) @[MirrorLakeSC.scala 104:39]
                node _addr_T_1 = add(_addr_T, immI) @[MirrorLakeSC.scala 104:46]
                node _addr_T_2 = tail(_addr_T_1, 1) @[MirrorLakeSC.scala 104:46]
                node addr = asSInt(_addr_T_2) @[MirrorLakeSC.scala 104:46]
                node _io_dmem_addr_T = asUInt(addr) @[MirrorLakeSC.scala 105:28]
                io.dmem_addr <= _io_dmem_addr_T @[MirrorLakeSC.scala 105:20]
                io.dmem_wen <= UInt<1>("h0") @[MirrorLakeSC.scala 106:19]
                node _T_12 = eq(UInt<1>("h0"), funct3) @[MirrorLakeSC.scala 108:22]
                when _T_12 : @[MirrorLakeSC.scala 108:22]
                  node _byteShift_T = bits(addr, 1, 0) @[MirrorLakeSC.scala 110:31]
                  node byteShift = mul(_byteShift_T, UInt<4>("h8")) @[MirrorLakeSC.scala 110:37]
                  node _byteData_T = dshr(io.dmem_rdata, byteShift) @[MirrorLakeSC.scala 111:36]
                  node byteData = bits(_byteData_T, 7, 0) @[MirrorLakeSC.scala 111:49]
                  node _writeBackData_T_6 = bits(byteData, 7, 7) @[MirrorLakeSC.scala 112:49]
                  node _writeBackData_T_7 = bits(_writeBackData_T_6, 0, 0) @[Bitwise.scala 77:15]
                  node _writeBackData_T_8 = mux(_writeBackData_T_7, UInt<24>("hffffff"), UInt<24>("h0")) @[Bitwise.scala 77:12]
                  node _writeBackData_T_9 = cat(_writeBackData_T_8, byteData) @[Cat.scala 33:92]
                  writeBackData <= _writeBackData_T_9 @[MirrorLakeSC.scala 112:25]
                else :
                  node _T_13 = eq(UInt<1>("h1"), funct3) @[MirrorLakeSC.scala 108:22]
                  when _T_13 : @[MirrorLakeSC.scala 108:22]
                    node _halfShift_T = bits(addr, 1, 1) @[MirrorLakeSC.scala 115:31]
                    node halfShift = mul(_halfShift_T, UInt<5>("h10")) @[MirrorLakeSC.scala 115:35]
                    node _halfData_T = dshr(io.dmem_rdata, halfShift) @[MirrorLakeSC.scala 116:36]
                    node halfData = bits(_halfData_T, 15, 0) @[MirrorLakeSC.scala 116:49]
                    node _writeBackData_T_10 = bits(halfData, 15, 15) @[MirrorLakeSC.scala 117:49]
                    node _writeBackData_T_11 = bits(_writeBackData_T_10, 0, 0) @[Bitwise.scala 77:15]
                    node _writeBackData_T_12 = mux(_writeBackData_T_11, UInt<16>("hffff"), UInt<16>("h0")) @[Bitwise.scala 77:12]
                    node _writeBackData_T_13 = cat(_writeBackData_T_12, halfData) @[Cat.scala 33:92]
                    writeBackData <= _writeBackData_T_13 @[MirrorLakeSC.scala 117:25]
                  else :
                    node _T_14 = eq(UInt<2>("h2"), funct3) @[MirrorLakeSC.scala 108:22]
                    when _T_14 : @[MirrorLakeSC.scala 108:22]
                      writeBackData <= io.dmem_rdata @[MirrorLakeSC.scala 120:25]
                    else :
                      node _T_15 = eq(UInt<3>("h4"), funct3) @[MirrorLakeSC.scala 108:22]
                      when _T_15 : @[MirrorLakeSC.scala 108:22]
                        node _byteShift_T_1 = bits(addr, 1, 0) @[MirrorLakeSC.scala 123:31]
                        node byteShift_1 = mul(_byteShift_T_1, UInt<4>("h8")) @[MirrorLakeSC.scala 123:37]
                        node _byteData_T_1 = dshr(io.dmem_rdata, byteShift_1) @[MirrorLakeSC.scala 124:36]
                        node byteData_1 = bits(_byteData_T_1, 7, 0) @[MirrorLakeSC.scala 124:49]
                        node _writeBackData_T_14 = cat(UInt<24>("h0"), byteData_1) @[Cat.scala 33:92]
                        writeBackData <= _writeBackData_T_14 @[MirrorLakeSC.scala 125:25]
                      else :
                        node _T_16 = eq(UInt<3>("h5"), funct3) @[MirrorLakeSC.scala 108:22]
                        when _T_16 : @[MirrorLakeSC.scala 108:22]
                          node _halfShift_T_1 = bits(addr, 1, 1) @[MirrorLakeSC.scala 128:31]
                          node halfShift_1 = mul(_halfShift_T_1, UInt<5>("h10")) @[MirrorLakeSC.scala 128:35]
                          node _halfData_T_1 = dshr(io.dmem_rdata, halfShift_1) @[MirrorLakeSC.scala 129:36]
                          node halfData_1 = bits(_halfData_T_1, 15, 0) @[MirrorLakeSC.scala 129:49]
                          node _writeBackData_T_15 = cat(UInt<16>("h0"), halfData_1) @[Cat.scala 33:92]
                          writeBackData <= _writeBackData_T_15 @[MirrorLakeSC.scala 130:25]
                regWrite <= UInt<1>("h1") @[MirrorLakeSC.scala 133:16]
              else :
                node _T_17 = eq(UInt<7>("h23"), opcode) @[MirrorLakeSC.scala 64:18]
                when _T_17 : @[MirrorLakeSC.scala 64:18]
                  node _addr_T_3 = asSInt(regfile.io.rs1Data) @[MirrorLakeSC.scala 137:39]
                  node _addr_T_4 = add(_addr_T_3, immS) @[MirrorLakeSC.scala 137:46]
                  node _addr_T_5 = tail(_addr_T_4, 1) @[MirrorLakeSC.scala 137:46]
                  node addr_1 = asSInt(_addr_T_5) @[MirrorLakeSC.scala 137:46]
                  node _io_dmem_addr_T_1 = asUInt(addr_1) @[MirrorLakeSC.scala 138:28]
                  io.dmem_addr <= _io_dmem_addr_T_1 @[MirrorLakeSC.scala 138:20]
                  io.dmem_wen <= UInt<1>("h1") @[MirrorLakeSC.scala 139:19]
                  node _T_18 = eq(UInt<1>("h0"), funct3) @[MirrorLakeSC.scala 140:22]
                  when _T_18 : @[MirrorLakeSC.scala 140:22]
                    node storeByte = bits(regfile.io.rs2Data, 7, 0) @[MirrorLakeSC.scala 142:45]
                    node io_dmem_wdata_lo = cat(storeByte, storeByte) @[Cat.scala 33:92]
                    node io_dmem_wdata_hi = cat(storeByte, storeByte) @[Cat.scala 33:92]
                    node _io_dmem_wdata_T = cat(io_dmem_wdata_hi, io_dmem_wdata_lo) @[Cat.scala 33:92]
                    io.dmem_wdata <= _io_dmem_wdata_T @[MirrorLakeSC.scala 143:25]
                    node byteSel = bits(addr_1, 1, 0) @[MirrorLakeSC.scala 144:29]
                    node _io_dmem_wmask_T = dshl(UInt<1>("h1"), byteSel) @[MirrorLakeSC.scala 145:33]
                    io.dmem_wmask <= _io_dmem_wmask_T @[MirrorLakeSC.scala 145:25]
                  else :
                    node _T_19 = eq(UInt<1>("h1"), funct3) @[MirrorLakeSC.scala 140:22]
                    when _T_19 : @[MirrorLakeSC.scala 140:22]
                      node storeHalf = bits(regfile.io.rs2Data, 15, 0) @[MirrorLakeSC.scala 148:45]
                      node _io_dmem_wdata_T_1 = cat(storeHalf, storeHalf) @[Cat.scala 33:92]
                      io.dmem_wdata <= _io_dmem_wdata_T_1 @[MirrorLakeSC.scala 149:25]
                      node halfSel = bits(addr_1, 1, 1) @[MirrorLakeSC.scala 150:29]
                      node _io_dmem_wmask_T_1 = eq(halfSel, UInt<1>("h0")) @[MirrorLakeSC.scala 151:40]
                      node _io_dmem_wmask_T_2 = mux(_io_dmem_wmask_T_1, UInt<4>("h3"), UInt<4>("hc")) @[MirrorLakeSC.scala 151:31]
                      io.dmem_wmask <= _io_dmem_wmask_T_2 @[MirrorLakeSC.scala 151:25]
                    else :
                      node _T_20 = eq(UInt<2>("h2"), funct3) @[MirrorLakeSC.scala 140:22]
                      when _T_20 : @[MirrorLakeSC.scala 140:22]
                        io.dmem_wdata <= regfile.io.rs2Data @[MirrorLakeSC.scala 154:25]
                        io.dmem_wmask <= UInt<4>("hf") @[MirrorLakeSC.scala 155:25]
                else :
                  node _T_21 = eq(UInt<7>("h13"), opcode) @[MirrorLakeSC.scala 64:18]
                  when _T_21 : @[MirrorLakeSC.scala 64:18]
                    node _T_22 = eq(UInt<1>("h0"), funct3) @[MirrorLakeSC.scala 162:22]
                    when _T_22 : @[MirrorLakeSC.scala 162:22]
                      aluOp <= UInt<4>("h0") @[MirrorLakeSC.scala 163:30]
                    else :
                      node _T_23 = eq(UInt<2>("h2"), funct3) @[MirrorLakeSC.scala 162:22]
                      when _T_23 : @[MirrorLakeSC.scala 162:22]
                        aluOp <= UInt<4>("h3") @[MirrorLakeSC.scala 164:30]
                      else :
                        node _T_24 = eq(UInt<2>("h3"), funct3) @[MirrorLakeSC.scala 162:22]
                        when _T_24 : @[MirrorLakeSC.scala 162:22]
                          aluOp <= UInt<4>("h4") @[MirrorLakeSC.scala 165:30]
                        else :
                          node _T_25 = eq(UInt<3>("h4"), funct3) @[MirrorLakeSC.scala 162:22]
                          when _T_25 : @[MirrorLakeSC.scala 162:22]
                            aluOp <= UInt<4>("h5") @[MirrorLakeSC.scala 166:30]
                          else :
                            node _T_26 = eq(UInt<3>("h6"), funct3) @[MirrorLakeSC.scala 162:22]
                            when _T_26 : @[MirrorLakeSC.scala 162:22]
                              aluOp <= UInt<4>("h8") @[MirrorLakeSC.scala 167:30]
                            else :
                              node _T_27 = eq(UInt<3>("h7"), funct3) @[MirrorLakeSC.scala 162:22]
                              when _T_27 : @[MirrorLakeSC.scala 162:22]
                                aluOp <= UInt<4>("h9") @[MirrorLakeSC.scala 168:30]
                              else :
                                node _T_28 = eq(UInt<1>("h1"), funct3) @[MirrorLakeSC.scala 162:22]
                                when _T_28 : @[MirrorLakeSC.scala 162:22]
                                  aluOp <= UInt<4>("h2") @[MirrorLakeSC.scala 169:30]
                                else :
                                  node _T_29 = eq(UInt<3>("h5"), funct3) @[MirrorLakeSC.scala 162:22]
                                  when _T_29 : @[MirrorLakeSC.scala 162:22]
                                    node _aluOp_T = eq(funct7, UInt<6>("h20")) @[MirrorLakeSC.scala 170:44]
                                    node _aluOp_T_1 = mux(_aluOp_T, UInt<4>("h7"), UInt<4>("h6")) @[MirrorLakeSC.scala 170:36]
                                    aluOp <= _aluOp_T_1 @[MirrorLakeSC.scala 170:30]
                    node _aluSrc2_T = asUInt(immI) @[MirrorLakeSC.scala 172:23]
                    aluSrc2 <= _aluSrc2_T @[MirrorLakeSC.scala 172:15]
                    regWrite <= UInt<1>("h1") @[MirrorLakeSC.scala 173:16]
                  else :
                    node _T_30 = eq(UInt<7>("h33"), opcode) @[MirrorLakeSC.scala 64:18]
                    when _T_30 : @[MirrorLakeSC.scala 64:18]
                      node _T_31 = eq(UInt<1>("h0"), funct3) @[MirrorLakeSC.scala 177:22]
                      when _T_31 : @[MirrorLakeSC.scala 177:22]
                        node _aluOp_T_2 = eq(funct7, UInt<6>("h20")) @[MirrorLakeSC.scala 178:44]
                        node _aluOp_T_3 = mux(_aluOp_T_2, UInt<4>("h1"), UInt<4>("h0")) @[MirrorLakeSC.scala 178:36]
                        aluOp <= _aluOp_T_3 @[MirrorLakeSC.scala 178:30]
                      else :
                        node _T_32 = eq(UInt<1>("h1"), funct3) @[MirrorLakeSC.scala 177:22]
                        when _T_32 : @[MirrorLakeSC.scala 177:22]
                          aluOp <= UInt<4>("h2") @[MirrorLakeSC.scala 179:30]
                        else :
                          node _T_33 = eq(UInt<2>("h2"), funct3) @[MirrorLakeSC.scala 177:22]
                          when _T_33 : @[MirrorLakeSC.scala 177:22]
                            aluOp <= UInt<4>("h3") @[MirrorLakeSC.scala 180:30]
                          else :
                            node _T_34 = eq(UInt<2>("h3"), funct3) @[MirrorLakeSC.scala 177:22]
                            when _T_34 : @[MirrorLakeSC.scala 177:22]
                              aluOp <= UInt<4>("h4") @[MirrorLakeSC.scala 181:30]
                            else :
                              node _T_35 = eq(UInt<3>("h4"), funct3) @[MirrorLakeSC.scala 177:22]
                              when _T_35 : @[MirrorLakeSC.scala 177:22]
                                aluOp <= UInt<4>("h5") @[MirrorLakeSC.scala 182:30]
                              else :
                                node _T_36 = eq(UInt<3>("h5"), funct3) @[MirrorLakeSC.scala 177:22]
                                when _T_36 : @[MirrorLakeSC.scala 177:22]
                                  node _aluOp_T_4 = eq(funct7, UInt<6>("h20")) @[MirrorLakeSC.scala 183:44]
                                  node _aluOp_T_5 = mux(_aluOp_T_4, UInt<4>("h7"), UInt<4>("h6")) @[MirrorLakeSC.scala 183:36]
                                  aluOp <= _aluOp_T_5 @[MirrorLakeSC.scala 183:30]
                                else :
                                  node _T_37 = eq(UInt<3>("h6"), funct3) @[MirrorLakeSC.scala 177:22]
                                  when _T_37 : @[MirrorLakeSC.scala 177:22]
                                    aluOp <= UInt<4>("h8") @[MirrorLakeSC.scala 184:30]
                                  else :
                                    node _T_38 = eq(UInt<3>("h7"), funct3) @[MirrorLakeSC.scala 177:22]
                                    when _T_38 : @[MirrorLakeSC.scala 177:22]
                                      aluOp <= UInt<4>("h9") @[MirrorLakeSC.scala 185:30]
                      regWrite <= UInt<1>("h1") @[MirrorLakeSC.scala 187:16]
                    else :
                      node _T_39 = eq(UInt<7>("hf"), opcode) @[MirrorLakeSC.scala 64:18]
                      when _T_39 : @[MirrorLakeSC.scala 64:18]
                        skip
                      else :
                        node _T_40 = eq(UInt<7>("h73"), opcode) @[MirrorLakeSC.scala 64:18]
                        when _T_40 : @[MirrorLakeSC.scala 64:18]
                          skip
    alu.io.op <= aluOp @[MirrorLakeSC.scala 199:13]
    alu.io.a <= aluSrc1 @[MirrorLakeSC.scala 200:12]
    alu.io.b <= aluSrc2 @[MirrorLakeSC.scala 201:12]
    node _T_41 = eq(opcode, UInt<7>("h33")) @[MirrorLakeSC.scala 204:15]
    node _T_42 = eq(opcode, UInt<7>("h13")) @[MirrorLakeSC.scala 204:40]
    node _T_43 = or(_T_41, _T_42) @[MirrorLakeSC.scala 204:30]
    when _T_43 : @[MirrorLakeSC.scala 204:57]
      writeBackData <= alu.io.result @[MirrorLakeSC.scala 205:19]
    regfile.io.rd <= rd @[MirrorLakeSC.scala 209:17]
    regfile.io.writeData <= writeBackData @[MirrorLakeSC.scala 210:24]
    regfile.io.regWrite <= regWrite @[MirrorLakeSC.scala 211:23]
    pc <= nextPC @[MirrorLakeSC.scala 214:6]

