$date
2025-04-11T13:56+0000
$end
$version
0.2
$end
$comment

$end
$timescale 1ns  $end
$scope module MirrorLakeSC $end
 $var wire 6 ! halfShift $end
 $var wire 32 " addr_1 $end
 $var wire 12 # immJ_hi_hi $end
 $var wire 16 $ storeHalf $end
 $var wire 8 % byteData $end
 $var wire 1 & branchTaken $end
 $var wire 7 ' opcode $end
 $var wire 4 ) aluOp $end
 $var wire 1 + regfile $end
 $var wire 3 , funct3 $end
 $var wire 7 - funct7 $end
 $var wire 16 . io_dmem_wdata_lo $end
 $var wire 32 / io_imem_addr $end
 $var wire 27 1 immS_hi $end
 $var wire 6 3 byteShift $end
 $var wire 8 4 storeByte $end
 $var wire 32 5 nextPC $end
 $var wire 32 7 io_imem_inst $end
 $var wire 32 8 immJ $end
 $var wire 32 9 immI $end
 $var wire 32 : immS $end
 $var wire 32 ; immU $end
 $var wire 32 < io_dmem_wdata $end
 $var wire 32 = immB $end
 $var wire 1 > alu $end
 $var wire 1 ? clock $end
 $var wire 32 @ aluSrc1 $end
 $var wire 32 A aluSrc2 $end
 $var wire 11 C immJ_lo_hi $end
 $var wire 32 D pc $end
 $var wire 1 E halfSel $end
 $var wire 5 F rs2 $end
 $var wire 5 G rs1 $end
 $var wire 5 I rd $end
 $var wire 32 K writeBackData $end
 $var wire 12 M immJ_lo $end
 $var wire 1 N regWrite $end
 $var wire 32 O io_dmem_addr $end
 $var wire 6 \ byteShift_1 $end
 $var wire 16 ] halfData $end
 $var wire 20 ^ immJ_hi $end
 $var wire 10 a immB_lo_hi $end
 $var wire 8 c byteData_1 $end
 $var wire 16 l halfData_1 $end
 $var wire 4 o io_dmem_wmask $end
 $var wire 2 p byteSel $end
 $var wire 16 q io_dmem_wdata_hi $end
 $var wire 1 r reset $end
 $var wire 20 s immB_hi_hi $end
 $var wire 11 t immB_lo $end
 $var wire 6 w halfShift_1 $end
 $var wire 1 "" io_dmem_wen $end
 $var wire 32 "$ addr $end
 $var wire 32 "% io_dmem_rdata $end
 $var wire 21 "& immB_hi $end
  $scope module alu $end
   $var wire 4 0 io_op $end
   $var wire 32 Y io_b $end
   $var wire 32 [ io_a $end
   $var wire 32 _ io_result $end
  $upscope $end
  $scope module regfile $end
   $var wire 5 ( io_rs2 $end
   $var wire 5 * io_rs1 $end
   $var wire 1 2 io_regWrite $end
   $var wire 32 6 io_rs2Data $end
   $var wire 32 B io_writeData $end
   $var wire 32 H io_rs1Data $end
   $var wire 1 J reset $end
   $var wire 1 L clock $end
   $var wire 32 P regs_14 $end
   $var wire 32 Q regs_13 $end
   $var wire 32 R regs_16 $end
   $var wire 32 S regs_15 $end
   $var wire 32 T regs_10 $end
   $var wire 32 U regs_12 $end
   $var wire 32 V regs_11 $end
   $var wire 32 W regs_18 $end
   $var wire 32 X regs_17 $end
   $var wire 32 Z regs_19 $end
   $var wire 32 ` regs_31 $end
   $var wire 32 b regs_30 $end
   $var wire 32 d regs_25 $end
   $var wire 32 e regs_24 $end
   $var wire 32 f regs_27 $end
   $var wire 32 g regs_26 $end
   $var wire 32 h regs_21 $end
   $var wire 32 i regs_20 $end
   $var wire 32 j regs_23 $end
   $var wire 32 k regs_22 $end
   $var wire 32 m regs_29 $end
   $var wire 32 n regs_28 $end
   $var wire 32 u regs_1 $end
   $var wire 32 v regs_0 $end
   $var wire 32 x regs_3 $end
   $var wire 32 y regs_2 $end
   $var wire 32 z regs_5 $end
   $var wire 32 { regs_4 $end
   $var wire 32 | regs_7 $end
   $var wire 32 } regs_6 $end
   $var wire 32 ~ regs_9 $end
   $var wire 32 "! regs_8 $end
   $var wire 5 "# io_rd $end
  $upscope $end
$upscope $end
$enddefinitions $end
$dumpvars
02
b0000000000000000 $
b00000000 c
b00000000000000000000000000000000 "
b00000000000000000000000000000000 "%
b00000000000000000000000000000000 "$
0>
0?
b00000000000000000000000000000000 ;
b00000000000000000000000000000000 :
b000000000000 #
b00000000000000000000000000000000 =
b0000000000000000 .
b00000000000000000000000000000000 <
b00000000000000000000000000000000 7
0E
b00000000000000000000000000000000 6
b00000000000000000000000000000000 9
b00000000000000000000000000000000 8
0J
b00000000000000000000000000000000 5
0L
b00000000000000000000000000000000 /
0N
b00000000000 t
b0000 )
b0000 0
0r
b000000 3
b0000000000 a
b000000 !
b000000000000000000000 "&
0""
b00000000000000000000000000000000 "!
b00000000000 C
b000000 w
b00000000000000000000 s
b000000000000000000000000000 1
b00000000000000000000 ^
b00000 (
b00000 *
b000000 \
b00000 "#
b00000000000000000000000000000000 ~
b00000 G
b00000 F
b00000 I
b00000000000000000000000000000000 k
b00000000000000000000000000000000 j
b00000000000000000000000000000000 m
b00000000000000000000000000000000 g
b00000000000000000000000000000000 f
b00000000000000000000000000000000 i
b00000000000000000000000000000000 h
b00 p
b00000000000000000000000000000000 b
b00000000 %
b00000000000000000000000000000000 e
b00000000000000000000000000000000 d
b00000000000000000000000000000000 _
b0000000000000000 l
b00000000000000000000000000000000 `
b0000000000000000 q
b00000000000000000000000000000000 {
b00000000000000000000000000000000 z
b00000000000000000000000000000000 }
b00000000000000000000000000000000 |
b00000000000000000000000000000000 v
b00000000000000000000000000000000 y
b00000000000000000000000000000000 x
b00000000000000000000000000000000 u
b00000000 4
b00000000000000000000000000000000 n
b00000000000000000000000000000000 K
b0000000 -
b00000000000000000000000000000000 H
b00000000000000000000000000000000 B
b00000000000000000000000000000000 D
b0000000 '
b00000000000000000000000000000000 A
b000 ,
b00000000000000000000000000000000 @
b00000000000000000000000000000000 [
b00000000000000000000000000000000 Z
b00000000000000000000000000000000 W
b00000000000000000000000000000000 V
0&
b00000000000000000000000000000000 Y
b0000 o
b00000000000000000000000000000000 X
b000000000000 M
b00000000000000000000000000000000 S
b00000000000000000000000000000000 R
b00000000000000000000000000000000 U
0+
b00000000000000000000000000000000 T
b0000000000000000 ]
b00000000000000000000000000000000 O
b00000000000000000000000000000000 Q
b00000000000000000000000000000000 P
$end
#0
1r
b00000000000000000000000000000100 5
1J
#1
1L
1?
#6
12
0r
b0010011 '
b00000000000000000000000000010011 7
0J
0L
1N
0?
#11
b00000000000000000000000000000100 D
b00000000000000000000000000001000 5
1L
b00000000000000000000000000000100 /
1?
#16
b00000000000000000000000000000000 7
0L
0?
